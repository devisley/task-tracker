<?php

namespace app\models;

use Yii;
use yii\behaviors\AttributeBehavior;
use yii\behaviors\TimestampBehavior;
use yii\db\ActiveRecord;

/**
 * This is the model class for table "task".
 *
 * @property int $id
 * @property string $title
 * @property string $text
 * @property int $team_id
 * @property int $user_id
 * @property int $begin_timestamp
 * @property string $deadline_timestamp
 * @property int end_timestamp
 * @property string end_comment
 * @property int $admin_id
 * @property int $created_at
 * @property int $updated_at
 *
 * @property User $admin
 * @property User $user
 */
class Task extends \yii\db\ActiveRecord
{
    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'task';
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['title', 'user_id', 'deadline_timestamp'], 'required'],
            [['user_id', 'begin_timestamp', 'admin_id', 'created_at', 'updated_at'], 'integer'],
            [['title'], 'string', 'max' => 255],
            [['admin_id'], 'exist', 'skipOnError' => true, 'targetClass' => User::className(), 'targetAttribute' => ['admin_id' => 'id']],
            [['user_id'], 'exist', 'skipOnError' => true, 'targetClass' => User::className(), 'targetAttribute' => ['user_id' => 'id']],
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'title' => 'Название',
            'text' => 'Полное описание',
            'team_id' => 'Команда',
            'user_id' => 'Исполнитель',
            'begin_timestamp' => 'Дата постановки',
            'deadline_timestamp' => 'Срок завершения',
            'end_timestamp' => 'Дата завершения',
            'end_comment' => 'Отчет исполнителя',
            'admin_id' => 'Admin ID',
            'created_at' => 'Created At',
            'updated_at' => 'Updated At',
        ];
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getAdmin()
    {
        return $this->hasOne(User::className(), ['id' => 'admin_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getUser()
    {
        return $this->hasOne(User::className(), ['id' => 'user_id']);
    }

    public function getUserLogin() {
        return $this->user->login;
    }

    public function beforeValidate()
    {
        return parent::beforeValidate(); // TODO: Change the autogenerated stub
    }

    public static function getAllTasks($whereCondition) {
        return static::find()
            ->joinWith(['user u'])
            ->joinWith(['admin a'])
            ->where($whereCondition)
            //->asArray()
            ->all();
    }

    public function behaviors()
    {
        return [
            'timestamp' => [
                'class' => TimestampBehavior::className(),
            ],

            'update_begin_timestamp' => [
                'class' => AttributeBehavior::className(),
                'attributes' => [
                    ActiveRecord::EVENT_BEFORE_INSERT => 'begin_timestamp',
                ],
                'value' => time()
            ],
        ];
    }

    public function beforeSave($insert)
    {
        if (Yii::$app->request->get('teamId')) {
            $array = explode('-', $this->deadline_timestamp);
            $this->deadline_timestamp = mktime(0,0,0, (int)$array[1], (int)$array[2], (int)$array[0]);
            $this->admin_id = Yii::$app->user->id;
            $this->team_id = Yii::$app->request->get('teamId');
        }

        return parent::beforeSave($insert);
    }

}
